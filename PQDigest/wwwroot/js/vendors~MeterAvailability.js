(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~MeterAvailability"],{

/***/ "../node_modules/@gpa-gemstone/react-table/index.js":
/*!**********************************************************!*\
  !*** ../node_modules/@gpa-gemstone/react-table/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

//  ******************************************************************************************************
//  Table.tsx - Gbtc
//
//  Copyright Â© 2018, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  08/02/2018 - Billy Ernest
//       Generated original version of source code.
//
//  ******************************************************************************************************
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(/*! react */ "react");
var _ = __webpack_require__(/*! lodash */ "../node_modules/lodash/lodash.js");
var AngleIcon = function (props) { return (React.createElement("span", { style: { width: 10, height: 10, margin: 3 }, className: 'fa fa-angle-' + (props.ascending ? 'up' : 'down') })); };
var Table = /** @class */ (function (_super) {
    __extends(Table, _super);
    function Table(props) {
        return _super.call(this, props) || this;
    }
    Table.prototype.render = function () {
        var rowComponents = this.generateRows();
        var headerComponents = this.generateHeaders();
        return (React.createElement("table", { className: this.props.tableClass !== undefined ? this.props.tableClass : '', style: this.props.tableStyle },
            React.createElement("thead", { style: this.props.theadStyle }, headerComponents),
            React.createElement("tbody", { style: this.props.tbodyStyle }, rowComponents)));
    };
    Table.prototype.generateHeaders = function () {
        var _this = this;
        if (this.props.cols.length === 0)
            return null;
        var cells = this.props.cols.map(function (colData, index) {
            var style;
            if (colData.headerStyle !== undefined) {
                style = colData.headerStyle;
            }
            else
                style = {};
            if (style.cursor === undefined)
                style.cursor = 'pointer';
            return (React.createElement("th", { key: index, style: style, onClick: function (e) { return _this.handleSort({ col: colData.key, ascending: _this.props.ascending }, e); } },
                colData.label,
                _this.props.sortField === colData.key ? React.createElement(AngleIcon, { ascending: _this.props.ascending }) : null));
        });
        return React.createElement("tr", null, cells);
    };
    Table.prototype.generateRows = function () {
        var _this = this;
        if (this.props.data.length === 0)
            return null;
        return this.props.data.map(function (item, index) {
            var cells = _this.props.cols.map(function (colData) {
                var css;
                if (colData.rowStyle === undefined)
                    css = {};
                else
                    css = _.clone(colData.rowStyle);
                return (React.createElement("td", { key: index.toString() + item[colData.key] + colData.key, style: css, onClick: _this.handleClick.bind(_this, { col: colData.key, row: item, data: item[colData.key] }) }, colData.content !== undefined ? colData.content(item, colData.key, css) : item[colData.key]));
            });
            var style;
            if (_this.props.rowStyle !== undefined) {
                style = _.clone(_this.props.rowStyle);
            }
            else
                style = {};
            if (style.cursor === undefined)
                style.cursor = 'pointer';
            if (_this.props.selected !== undefined && _this.props.selected(item))
                style.backgroundColor = 'yellow';
            return (React.createElement("tr", { style: style, key: index.toString() }, cells));
        });
    };
    Table.prototype.handleClick = function (data, event) {
        this.props.onClick(data, event);
    };
    Table.prototype.handleSort = function (data, event) {
        this.props.onSort(data);
    };
    return Table;
}(React.Component));
exports.default = Table;


/***/ }),

/***/ "../node_modules/@influxdata/influxdb-client/dist/index.browser.js":
/*!*************************************************************************!*\
  !*** ../node_modules/@influxdata/influxdb-client/dist/index.browser.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(t,e){ true?e(exports):undefined}(this,(function(t){"use strict";function e(){const t=new TextDecoder("utf-8");return{concat(t,e){const r=new Uint8Array(t.length+e.length);return r.set(t),r.set(e,t.length),r},copy(t,e,r){const s=new Uint8Array(r-e);return s.set(t.subarray(e,r)),s},toUtf8String:(e,r,s)=>t.decode(e.subarray(r,s))}}function r(t,r){const s=null!=r?r:e();let n,i=!1,o=!1;return{next(e){if(!i)try{!function(e){let r,l=0;for(n?(e=s.concat(n,e),r=n.length):r=0;r<e.length;){const n=e[r];if(10===n){if(!o){const n=r>0&&13===e[r-1]?r-1:r;if(i)return;t.next(s.toUtf8String(e,l,n)),l=r+1}}else 34===n&&(o=!o);r++}n=l<r?s.copy(e,l,r):void 0}(e)}catch(t){this.error(t)}},error(e){i||(i=!0,t.error(e))},complete(){i||(n&&t.next(s.toUtf8String(n,0,n.length)),i=!0,t.complete())},useCancellable(e){if(t.useCancellable){const r=this;t.useCancellable({cancel(){e.cancel(),n=void 0,r.complete()},isCancelled:()=>e.isCancelled()})}}}}class s{constructor(){this._reuse=!1}get reuse(){return this._reuse}set reuse(t){t&&!this.reusedValues&&(this.reusedValues=new Array(10)),this._reuse=t}withReuse(){return this.reuse=!0,this}splitLine(t){if(null==t)return this.lastSplitLength=0,[];let e=0,r=0;const s=this._reuse?this.reusedValues:[];let n=0;for(let i=0;i<t.length;i++){const o=t[i];if(","===o){if(e%2==0){const o=this.getValue(t,r,i,e);this._reuse?s[n++]=o:s.push(o),r=i+1,e=0}}else'"'===o&&e++}const i=this.getValue(t,r,t.length,e);return this._reuse?(s[n]=i,this.lastSplitLength=n+1):(s.push(i),this.lastSplitLength=s.length),s}getValue(t,e,r,s){return e===t.length?"":0===s?t.substring(e,r):2===s?t.substring(e+1,r-1):t.substring(e+1,r-1).replace(/""/gi,'"')}}class n{}function i(){return new n}const o=[404,408,425,429,500,502,503,504];function l(t){return o.includes(t)}class a extends Error{constructor(t){super(t),this.name="IllegalArgumentError",Object.setPrototypeOf(this,a.prototype)}}class u extends Error{constructor(t,e,r,s,n,i){if(super(),this.statusCode=t,this.statusMessage=e,this.body=r,this.contentType=n,Object.setPrototypeOf(this,u.prototype),i)this.message=i;else if(r){if(null==n?void 0:n.startsWith("application/json"))try{this.json=JSON.parse(r),this.message=this.json.message,this.code=this.json.code}catch(t){}this.message||(this.message=`${t} ${e} : ${r}`)}else this.message=`${t} ${e}`;this.name="HttpError",this.setRetryAfter(s)}setRetryAfter(t){"string"==typeof t&&/^[0-9]+$/.test(t)?this._retryAfter=parseInt(t):this._retryAfter=0}canRetry(){return l(this.statusCode)}retryAfter(){return this._retryAfter}}const c=["ECONNRESET","ENOTFOUND","ESOCKETTIMEDOUT","ETIMEDOUT","ECONNREFUSED","EHOSTUNREACH","EPIPE"];function h(t,e){if(t){let r;return"function"==typeof t.retryAfter?t.retryAfter():(r=0,e&&e>0?r+Math.round(Math.random()*e):r)}return 0}class f extends Error{constructor(){super(),Object.setPrototypeOf(this,f.prototype),this.name="RequestTimedOutError",this.message="Request timed out"}canRetry(){return!0}retryAfter(){return 0}}class d extends Error{constructor(){super(),this.name="AbortError",Object.setPrototypeOf(this,d.prototype),this.message="Response aborted"}canRetry(){return!0}retryAfter(){return 0}}const p=t=>t,g={boolean:t=>"true"===t,unsignedLong:t=>""===t?null:+t,long:t=>""===t?null:+t,double:t=>""===t?null:+t,string:p,base64Binary:p,duration:t=>""===t?null:t,"dateTime:RFC3339":t=>""===t?null:t};class y{constructor(t){t.forEach((t,e)=>t.index=e),this.columns=t}column(t){for(let e=0;e<this.columns.length;e++){const r=this.columns[e];if(r.label===t)return r}throw new a(`Column ${t} not found!`)}toObject(t){var e;const r={};for(let s=0;s<this.columns.length&&s<t.length;s++){let n=t[s];const i=this.columns[s];""===n&&i.defaultValue&&(n=i.defaultValue),r[i.label]=(null!==(e=g[i.dataType])&&void 0!==e?e:p)(n)}return r}}function m(t){return new y(t)}function w(t){const e=(new s).withReuse();let r,n,o=!0,l=0;return{error(e){t.error(e)},next(s){if(""===s)o=!0,r=void 0;else{const a=e.splitLine(s),u=e.lastSplitLength;if(o){if(!r){r=new Array(u);for(let t=0;t<u;t++)r[t]=i()}if(a[0].startsWith("#")){if("#datatype"===a[0])for(let t=1;t<u;t++)r[t].dataType=a[t];else if("#default"===a[0])for(let t=1;t<u;t++)r[t].defaultValue=a[t];else if("#group"===a[0])for(let t=1;t<u;t++)r[t].group="t"===a[t][0]}else{""===a[0]?(l=1,r=r.slice(1)):l=0;for(let t=l;t<u;t++)r[t-l].label=a[t];n=m(r),o=!1}}else t.next(a.slice(l,u),n)}},complete(){t.complete()},useCancellable(e){t.useCancellable&&t.useCancellable(e)}}}const b={retryJitter:200,minRetryDelay:5e3,maxRetryDelay:18e4,exponentialBase:5},x={batchSize:1e3,flushInterval:6e4,writeFailed:function(){},writeSuccess:function(){},maxRetries:3,maxBufferLines:32e3,retryJitter:200,minRetryDelay:5e3,maxRetryDelay:18e4,exponentialBase:5,gzipThreshold:1e3};function v(t,e){return function(r){let s="",n=0,i=0;for(;i<r.length;){const o=t.indexOf(r[i]);o>=0&&(s+=r.substring(n,i),s+=e[o],n=i+1),i++}return 0==n?r:(n<r.length&&(s+=r.substring(n,r.length)),s)}}const T={measurement:v(", \n\r\t",["\\,","\\ ","\\n","\\r","\\t"]),quoted:function(t,e){const r=v(t,e);return t=>'"'+r(t)+'"'}('"\\',['\\"',"\\\\"]),tag:v(", =\n\r\t",["\\,","\\ ","\\=","\\n","\\r","\\t"])};let O=Date.now(),R=0;function S(){{const t=Date.now();t!==O?(O=t,R=0):R++;const e=String(R);return String(t)+"000000000".substr(0,6-e.length)+e}}function E(){return String(Date.now())+"000000000".substr(0,3)}function D(){return String(Date.now())}function C(){return String(Math.floor(Date.now()/1e3))}const A={s:C,ms:D,us:E,ns:S,seconds:C,millis:D,micros:E,nanos:S},j={s:t=>""+Math.floor(t.getTime()/1e3),ms:t=>""+t.getTime(),us:t=>t.getTime()+"000",ns:t=>t.getTime()+"000000"},$={error(t,e){console.error("ERROR: "+t,e||"")},warn(t,e){console.warn("WARN: "+t,e||"")}};let L=$;const _={error(t,e){L.error(t,e)},warn(t,e){L.warn(t,e)}};const B=Symbol("FLUX_VALUE");class P{constructor(t){this.fluxValue=t}toString(){return this.fluxValue}[B](){return this.fluxValue}}function F(t){if(null==t)return"";t=t.toString();let e=void 0,r=0;function s(){void 0===e&&(e=t.substring(0,r))}for(;r<t.length;r++){const n=t.charAt(r);switch(n){case"\r":s(),e+="\\r";break;case"\n":s(),e+="\\n";break;case"\t":s(),e+="\\t";break;case'"':case"\\":s(),e=e+"\\"+n;break;case"$":if(r+1<t.length&&"{"===t.charAt(r+1)){s(),r++,e+="\\${";break}null!=e&&(e+=n);break;default:null!=e&&(e+=n)}}return void 0!==e?e:t}function z(t){if("number"==typeof t){if(!isFinite(t))throw new Error("not a flux float: "+t);return t.toString()}const e=String(t);let r=!1;for(const t of e)if("."!==t){if("."!==t&&"-"!==t&&(t<"0"||t>"9"))throw new Error("not a flux float: "+e)}else{if(r)throw new Error("not a flux float: "+e);r=!r}return e}function M(t){return`regexp.compile(v: "${F(t)}")`}function U(t){return new P(String(t))}function q(t){if(void 0===t)return"";if(null===t)return"null";if("boolean"==typeof t)return t.toString();if("string"==typeof t)return`"${F(t)}"`;if("number"==typeof t)return z(t);if("object"==typeof t){if("function"==typeof t[B])return t[B]();if(t instanceof Date)return t.toISOString();if(t instanceof RegExp)return M(t);if(Array.isArray(t))return`[${t.map(q).join(",")}]`}return q(t.toString())}const H="function"==typeof Symbol&&Symbol.observable||"@@observable";function I(t,e,r,s){return new(r||(r=Promise))((function(n,i){function o(t){try{a(s.next(t))}catch(t){i(t)}}function l(t){try{a(s.throw(t))}catch(t){i(t)}}function a(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,l)}a((s=s.apply(t,e||[])).next())}))}class N{constructor(t){this.options=Object.assign(Object.assign({},b),t),this.success()}nextDelay(t,e){const r=h(t);if(r&&r>0)return r+Math.round(Math.random()*this.options.retryJitter);if(e&&e>0){let t=this.options.minRetryDelay;for(let r=1;r<e&&(t*=this.options.exponentialBase,!(t>=this.options.maxRetryDelay));r++);return Math.min(Math.max(t,1),this.options.maxRetryDelay)+Math.round(Math.random()*this.options.retryJitter)}return this.currentDelay?this.currentDelay=Math.min(Math.max(this.currentDelay*this.options.exponentialBase,1)+Math.round(Math.random()*this.options.retryJitter),this.options.maxRetryDelay):this.currentDelay=this.options.minRetryDelay+Math.round(Math.random()*this.options.retryJitter),this.currentDelay}success(){this.currentDelay=void 0}}class k{constructor(t,e){this.maxLines=t,this.retryLines=e,this.size=0,this.nextRetryTime=0,this.closed=!1,this._timeoutHandle=void 0}addLines(t,e,r){if(this.closed)return;if(!t.length)return;const s=Date.now()+r;if(s>this.nextRetryTime&&(this.nextRetryTime=s),this.first&&this.size+t.length>this.maxLines){const e=this.size,r=.7*e;do{const t=this.first.next;this.size-=this.first.lines.length,this.first=t}while(this.first&&this.size+t.length>r);_.error(`RetryBuffer: ${e-this.size} oldest lines removed to keep buffer size under the limit of ${this.maxLines} lines`)}const n={lines:t,retryCount:e};this.last?(this.last.next=n,this.last=n):(this.first=n,this.last=n,this.scheduleRetry(r)),this.size+=t.length}removeLines(){if(this.first){const t=this.first;return this.first=this.first.next,this.size-=t.lines.length,this.first||(this.last=void 0),t}}scheduleRetry(t){this._timeoutHandle=setTimeout(()=>{const t=this.removeLines();t?this.retryLines(t.lines,t.retryCount).then(()=>{this.scheduleRetry(1)}).catch(t=>{this.scheduleRetry(this.nextRetryTime-Date.now())}):this._timeoutHandle=void 0},t)}flush(){return I(this,void 0,void 0,(function*(){let t;for(;t=this.removeLines();)yield this.retryLines(t.lines,t.retryCount)}))}close(){return this._timeoutHandle&&(clearTimeout(this._timeoutHandle),this._timeoutHandle=void 0),this.closed=!0,this.size}}class V{constructor(t,e,r){this.maxChunkRecords=t,this.flushFn=e,this.scheduleSend=r,this.length=0,this.lines=new Array(t)}add(t){0===this.length&&this.scheduleSend(),this.lines[this.length]=t,this.length++,this.length>=this.maxChunkRecords&&this.flush().catch(t=>{})}flush(){const t=this.reset();return t.length>0?this.flushFn(t):Promise.resolve()}reset(){const t=this.lines.slice(0,this.length);return this.length=0,t}}class W{constructor(t,e,r,s,n){this.transport=t,this.closed=!1,this._timeoutHandle=void 0,this.httpPath=`/api/v2/write?org=${encodeURIComponent(e)}&bucket=${encodeURIComponent(r)}&precision=${s}`,this.writeOptions=Object.assign(Object.assign({},x),n),this.currentTime=A[s],this.dateToProtocolTimestamp=j[s],this.writeOptions.defaultTags&&this.useDefaultTags(this.writeOptions.defaultTags),this.sendOptions={method:"POST",headers:Object.assign({"content-type":"text/plain; charset=utf-8"},null==n?void 0:n.headers),gzipThreshold:this.writeOptions.gzipThreshold};var i;this.writeBuffer=new V(this.writeOptions.batchSize,t=>(this._clearFlushTimeout(),this.sendBatch(t,this.writeOptions.maxRetries+1)),()=>{this.writeOptions.flushInterval>0&&(this._clearFlushTimeout(),this.closed||(this._timeoutHandle=setTimeout(()=>this.sendBatch(this.writeBuffer.reset(),this.writeOptions.maxRetries+1).catch(t=>{}),this.writeOptions.flushInterval)))}),this.sendBatch=this.sendBatch.bind(this),this.retryStrategy=(i=this.writeOptions,new N(i)),this.retryBuffer=new k(this.writeOptions.maxBufferLines,this.sendBatch)}sendBatch(t,e){const r=this;return!this.closed&&t.length>0?new Promise((s,n)=>{let i;const o={responseStarted(t,e){i=e},error(i){const o=r.writeOptions.maxRetries+2-e,l=r.writeOptions.writeFailed.call(r,i,t,o);if(l)l.then(s,n);else{if(!r.closed&&e>1&&(!(i instanceof u)||i.statusCode>=429))return _.warn(`Write to InfluxDB failed (remaining attempts: ${e-1}).`,i),r.retryBuffer.addLines(t,e-1,r.retryStrategy.nextDelay(i,o)),void n(i);_.error("Write to InfluxDB failed.",i),n(i)}},complete(){if(204==i||null==i)r.writeOptions.writeSuccess.call(r,t),r.retryStrategy.success(),s();else{const t=`204 HTTP response status code expected, but ${i} returned`,e=new u(i,t,void 0,"0");e.message=t,o.error(e)}}};this.transport.send(this.httpPath,t.join("\n"),this.sendOptions,o)}):Promise.resolve()}_clearFlushTimeout(){void 0!==this._timeoutHandle&&(clearTimeout(this._timeoutHandle),this._timeoutHandle=void 0)}writeRecord(t){if(this.closed)throw new Error("writeApi: already closed!");this.writeBuffer.add(t)}writeRecords(t){if(this.closed)throw new Error("writeApi: already closed!");for(let e=0;e<t.length;e++)this.writeBuffer.add(t[e])}writePoint(t){if(this.closed)throw new Error("writeApi: already closed!");const e=t.toLineProtocol(this);e&&this.writeBuffer.add(e)}writePoints(t){if(this.closed)throw new Error("writeApi: already closed!");for(let e=0;e<t.length;e++){const r=t[e].toLineProtocol(this);r&&this.writeBuffer.add(r)}}flush(t){return I(this,void 0,void 0,(function*(){if(yield this.writeBuffer.flush(),t)return yield this.retryBuffer.flush()}))}close(){return this.writeBuffer.flush().finally(()=>{const t=this.retryBuffer.close();t&&_.error(`Retry buffer closed with ${t} items that were not written to InfluxDB!`,null),this.closed=!0})}dispose(){return this._clearFlushTimeout(),this.closed=!0,this.retryBuffer.close()+this.writeBuffer.length}useDefaultTags(t){return this.defaultTags=void 0,Object.keys(t).forEach(e=>{(this.defaultTags||(this.defaultTags={}))[e]=T.tag(t[e])}),this}convertTime(t){return void 0===t?this.currentTime():"string"==typeof t?t.length>0?t:void 0:t instanceof Date?this.dateToProtocolTimestamp(t):String("number"==typeof t?Math.floor(t):t)}}function J(t){const e={};return t.headers.forEach((t,r)=>{const s=e[r];void 0===s?e[r]=t:Array.isArray(s)?s.push(t):e[r]=[s,t]}),e}class X{constructor(t){this.connectionOptions=t,this.chunkCombiner=e(),this.requestDecorator=function(){},this.defaultHeaders={"content-type":"application/json; charset=utf-8"},this.connectionOptions.token&&(this.defaultHeaders.Authorization="Token "+this.connectionOptions.token),this.url=String(this.connectionOptions.url),this.url.endsWith("/")&&(this.url=this.url.substring(0,this.url.length-1)),this.url.endsWith("/api/v2")&&(this.url=this.url.substring(0,this.url.length-"/api/v2".length),_.warn(`Please remove '/api/v2' context path from InfluxDB base url, using ${this.url} !`))}send(t,e,r,s){const n=function(t={}){let e=0;return{next:r=>{0===e&&t.next&&null!=r&&t.next(r)},error:r=>{0===e&&(e=1,t.error&&t.error(r))},complete:()=>{0===e&&(e=2,t.complete&&t.complete())},responseStarted:(e,r)=>{t.responseStarted&&t.responseStarted(e,r)}}}(s);let i=!1,o=r.signal;if(s&&s.useCancellable){const t=new AbortController;o||(o=t.signal,r=Object.assign(Object.assign({},r),o)),s.useCancellable({cancel(){i=!0,t.abort()},isCancelled:()=>i||o.aborted})}this.fetch(t,e,r).then(t=>I(this,void 0,void 0,(function*(){if((null==s?void 0:s.responseStarted)&&n.responseStarted(J(t),t.status),t.status>=300)return t.text().then(e=>{if(!e){const r=t.headers.get("x-influxdb-error");r&&(e=r)}n.error(new u(t.status,t.statusText,e,t.headers.get("retry-after"),t.headers.get("content-type")))}).catch(e=>{_.warn("Unable to receive error body",e),n.error(new u(t.status,t.statusText,void 0,t.headers.get("retry-after"),t.headers.get("content-type")))});if(t.body){const e=t.body.getReader();let r;do{r=yield e.read(),n.next(r.value)}while(!r.done)}else if(t.arrayBuffer){const e=yield t.arrayBuffer();n.next(new Uint8Array(e))}else{const e=yield t.text();n.next((new TextEncoder).encode(e))}}))).catch(t=>{i||n.error(t)}).finally(()=>n.complete())}request(t,e,r,s){var n,i;return I(this,void 0,void 0,(function*(){const o=yield this.fetch(t,e,r),{status:l,headers:a}=o,c=a.get("content-type")||"";if(s&&s(J(o),o.status),l>=300){let t=yield o.text();if(!t){const e=a.get("x-influxdb-error");e&&(t=e)}throw new u(l,o.statusText,t,o.headers.get("retry-after"),o.headers.get("content-type"))}const h=null!==(i=null===(n=r.headers)||void 0===n?void 0:n.accept)&&void 0!==i?i:c;return h.includes("json")?yield o.json():h.includes("text")||h.startsWith("application/csv")?yield o.text():void 0}))}fetch(t,e,r){const{method:s,headers:n}=r,i=
/*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
function(t,e){var r={};for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&e.indexOf(s)<0&&(r[s]=t[s]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(s=Object.getOwnPropertySymbols(t);n<s.length;n++)e.indexOf(s[n])<0&&Object.prototype.propertyIsEnumerable.call(t,s[n])&&(r[s[n]]=t[s[n]])}return r}(r,["method","headers"]),o=`${this.url}${t}`,l=Object.assign({method:s,body:"GET"===s||"HEAD"===s?void 0:"string"==typeof e?e:JSON.stringify(e),headers:Object.assign(Object.assign({},this.defaultHeaders),n),credentials:"omit"},i);return this.requestDecorator(l,r,o),fetch(o,l)}}function G(t,e){return e.toObject(t)}class K{constructor(t,e){this.isClosed=!1;try{e({next:e=>{t.next(e)},error:e=>{this.isClosed=!0,t.error(e)},complete:()=>{this.isClosed=!0,t.complete()},useCancellable:t=>{this.cancellable=t}})}catch(e){this.isClosed=!0,t.error(e)}}get closed(){return this.isClosed}unsubscribe(){var t;null===(t=this.cancellable)||void 0===t||t.cancel(),this.isClosed=!0}}function Q(){}class Y{constructor(t,e){this.executor=t,this.decorator=e}subscribe(t,e,r){const s=function(t){const{next:e,error:r,complete:s}=t;return{next:e?e.bind(t):Q,error:r?r.bind(t):Q,complete:s?s.bind(t):Q}}("object"!=typeof t||null===t?{next:t,error:e,complete:r}:t);return new K(this.decorator(s),this.executor)}[H](){return this}}const Z={header:!0,delimiter:",",quoteChar:'"',commentPrefix:"#",annotations:["datatype","group","default"]},tt=t=>t;class et{constructor(t,e){this.transport=t,this.options="string"==typeof e?{org:e}:e}with(t){return new et(this.transport,Object.assign(Object.assign({},this.options),t))}lines(t){return new Y(this.createExecutor(t),tt)}rows(t){return new Y(this.createExecutor(t),t=>w({next(e,r){t.next({values:e,tableMeta:r})},error(e){t.error(e)},complete(){t.complete()}}))}queryLines(t,e){this.createExecutor(t)(e)}queryRows(t,e){this.createExecutor(t)(w(e))}collectRows(t,e=G){const r=[];return new Promise((s,n)=>{this.queryRows(t,{next(t,s){const n=e.call(this,t,s);void 0!==n&&r.push(n)},error(t){n(t)},complete(){s(r)}})})}collectLines(t){const e=[];return new Promise((r,s)=>{this.queryLines(t,{next(t){e.push(t)},error(t){s(t)},complete(){r(e)}})})}queryRaw(t){const{org:e,type:r,gzip:s,headers:n}=this.options;return this.transport.request("/api/v2/query?org="+encodeURIComponent(e),JSON.stringify(this.decorateRequest({query:t.toString(),dialect:Z,type:r})),{method:"POST",headers:Object.assign({accept:"text/csv","accept-encoding":s?"gzip":"identity","content-type":"application/json; encoding=utf-8"},n)})}createExecutor(t){const{org:e,type:s,gzip:n,headers:i}=this.options;return o=>{this.transport.send("/api/v2/query?org="+encodeURIComponent(e),JSON.stringify(this.decorateRequest({query:t.toString(),dialect:Z,type:s})),{method:"POST",headers:Object.assign({"content-type":"application/json; encoding=utf-8","accept-encoding":n?"gzip":"identity"},i)},r(o,this.transport.chunkCombiner))}}decorateRequest(t){var e;return"function"==typeof this.options.now&&(t.now=this.options.now()),t.type=null!==(e=this.options.type)&&void 0!==e?e:"flux",t}}t.AbortError=d,t.DEFAULT_ConnectionOptions={timeout:1e4},t.DEFAULT_RetryDelayStrategyOptions=b,t.DEFAULT_WriteOptions=x,t.FLUX_VALUE=B,t.HttpError=u,t.IllegalArgumentError=a,t.InfluxDB=class{constructor(t){var e;if("string"==typeof t)this._options={url:t};else{if(null===t||"object"!=typeof t)throw new a("No url or configuration specified!");this._options=t}const r=this._options.url;if("string"!=typeof r)throw new a("No url specified!");r.endsWith("/")&&(this._options.url=r.substring(0,r.length-1)),this.transport=null!==(e=this._options.transport)&&void 0!==e?e:new X(this._options)}getWriteApi(t,e,r="ns",s){return new W(this.transport,t,e,r,null!=s?s:this._options.writeOptions)}getQueryApi(t){return new et(this.transport,t)}},t.LineSplitter=s,t.Logger=_,t.Point=class{constructor(t){this.tags={},this.fields={},t&&(this.name=t)}measurement(t){return this.name=t,this}tag(t,e){return this.tags[t]=e,this}booleanField(t,e){return this.fields[t]=e?"T":"F",this}intField(t,e){if("number"!=typeof e){let r;if(isNaN(r=parseInt(String(e))))throw new Error(`Expected integer value for field ${t}, but got '${e}'!`);e=r}return this.fields[t]=Math.floor(e)+"i",this}floatField(t,e){if("number"!=typeof e){let r;if(isNaN(r=parseFloat(e)))throw new Error(`Expected float value for field ${t}, but got '${e}'!`);e=r}return this.fields[t]=String(e),this}stringField(t,e){return null!=e&&("string"!=typeof e&&(e=String(e)),this.fields[t]=T.quoted(e)),this}timestamp(t){return this.time=t,this}toLineProtocol(t){if(!this.name)return;let e="";if(Object.keys(this.fields).sort().forEach(t=>{if(t){const r=this.fields[t];e.length>0&&(e+=","),e+=`${T.tag(t)}=${r}`}}),0===e.length)return;let r="";const s=t&&t.defaultTags?Object.assign(Object.assign({},t.defaultTags),this.tags):this.tags;Object.keys(s).sort().forEach(t=>{if(t){const e=s[t];e&&(r+=",",r+=`${T.tag(t)}=${T.tag(e)}`)}});let n=this.time;return t&&t.convertTime&&(n=t.convertTime(n)),`${T.measurement(this.name)}${r} ${e}${void 0!==n?" "+n:""}`}toString(){const t=this.toLineProtocol(void 0);return t||"invalid point: "+JSON.stringify(this,void 0)}},t.RequestTimedOutError=f,t.canRetryHttpCall=function(t){return!!t&&("function"==typeof t.canRetry?!!t.canRetry():!(!t.code||!c.includes(t.code)))},t.chunksToLines=r,t.consoleLogger=$,t.createFluxTableColumn=function(t){var e,r;const s=new n;return s.label=String(t.label),s.dataType=t.dataType,s.group=Boolean(t.group),s.defaultValue=null!==(e=t.defaultValue)&&void 0!==e?e:"",s.index=null!==(r=t.index)&&void 0!==r?r:0,s},t.createFluxTableMetaData=m,t.createTextDecoderCombiner=e,t.currentTime=A,t.dateToProtocolTimestamp=j,t.escape=T,t.flux=function(t,...e){if(1==t.length&&0===e.length)return U(t[0]);const r=new Array(t.length+e.length);let s=0;for(let i=0;i<t.length;i++){const o=t[i];if(r[s++]=o,i<e.length){const l=e[i];let a;if(o.endsWith('"')&&i+1<t.length&&t[i+1].startsWith('"'))a=F(l);else if(a=q(l),""===a&&("object"!=typeof(n=l)||"function"!=typeof n[B]))throw new Error(`Unsupported parameter literal '${l}' at index: ${i}, type: ${typeof l}`);r[s++]=a}else if(i<t.length-1)throw new Error("Too few parameters supplied!")}var n;return U(r.join(""))},t.fluxBool=function(t){return new P("true"===t||"false"===t?t:(!!t).toString())},t.fluxDateTime=function(t){return new P(function(t){return`time(v: "${F(t)}")`}(t))},t.fluxDuration=function(t){return new P(`duration(v: "${F(t)}")`)},t.fluxExpression=U,t.fluxFloat=function(t){return new P(z(t))},t.fluxInteger=function(t){const e=z(t);for(const t of e)if("."===t)throw new Error("not a flux integer: "+e);return new P(e)},t.fluxRegExp=function(t){return new P(M(t))},t.fluxString=function(t){return new P(`"${F(t)}"`)},t.getRetryDelay=h,t.isStatusCodeRetriable=l,t.linesToTables=w,t.newFluxTableColumn=i,t.sanitizeFloat=z,t.serializeDateTimeAsDate=function(){g["dateTime:RFC3339"]=t=>""===t?null:new Date(Date.parse(t))},t.serializeDateTimeAsNumber=function(){g["dateTime:RFC3339"]=t=>""===t?null:Date.parse(t)},t.serializeDateTimeAsString=function(){g["dateTime:RFC3339"]=t=>""===t?null:t},t.setLogger=function(t){const e=L;return L=t,e},t.stringToLines=function(t,e){let r=!1,s=0,n=0;for(;n<t.length;){const i=t.charCodeAt(n);if(10===i){if(!r){const r=n>0&&13===t.charCodeAt(n-1)?n-1:n;e.next(t.substring(s,r)),s=n+1}}else 34===i&&(r=!r);n++}s<n&&e.next(t.substring(s,n)),e.complete()},t.symbolObservable=H,t.toFluxValue=q,t.typeSerializers=g,t.useProcessHrtime=function(t){return!1},Object.defineProperty(t,"__esModule",{value:!0})}));


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,